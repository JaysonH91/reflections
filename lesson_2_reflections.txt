What happens when you initialize a repository? Why do you need to do it?
	
	It creates a .git directory in that location. It will save the metadata and begin tracking our files version histories for us.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The Stagging area is different from the working directory because, it takes the files from the working directory as a getting ready to commit area.
	The Stagging area is different from the repository because, the actual repository has the already existing commited files and the stagging area is like a pre commit or getting ready to commit area and is subject to be changed by the user.

How can you use the staging area to make sure you have one commit per logical
change?
	
	You can preview your files you want to change and ask yourself, is this one logical change for this commit? if not, then remove some files fromthe the staging area and commit with one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Branchecs will be helpful when you have multiple logical changes that you are working on at the same time and you don have to worry about one desin interupting the main or other features you are experimenting on.

How do the diagrams help you visualize the branch structure?
	
	Diagrams help you visualize your code a whol lot better than just running thee linear git log. This makes it a log more human readable too.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?


