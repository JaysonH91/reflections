When would you want to use a remote repository rather than keeping all your work
local?

    I would use a remote repository to collaborate my changes with others or with myself across different computers.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You want to manually do this so that changes that were not intended to be public are not pushed out yet.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are a clone directly on Github from another github user to yourself.
    Clones are direct copies from eithere local to local, Remote to local or remote Github repository
    to your local machine.
    Branches are a concept for actual repositories and there maybe multiple branches per repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It is good because then you can look at the differences locally and decide to merge locally yet or not.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Man, taht would be insainly hard! Would probaly email each other back and forth and
    manually merge changes in hopes that they would work.
    I would imagine it would be a nightmare.
    Hence, this is probably why Git & Github was born!

    It cannot be easier without using Git/Github.

    The first answer to this question is what would be harder!

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You will want to make checnges in a seperate branch so that you can fully experiment and not break master.
    
    Working on the remote the benefits are easier in merging with others code, however it would get more
    complex to see what YOUR changes actually are compared to others. Keeping it in your seperate branch is
    more complicated but keeps from introducing bugs more as each branch has a specific focus and not a bunch
    of focusses. At the end of the day, branching is a way to keep the code more stable than just working in
    the master branch all the time.
